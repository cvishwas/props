import javax.persistence.*;
import java.time.LocalDateTime;

@Entity
public class RoleScope {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "role_id", nullable = false)
    private Role role;

    @ManyToOne
    @JoinColumn(name = "scope_id", nullable = false)
    private Scope scope;

    private LocalDateTime createdDate;

    // Getters and Setters
}

import com.example.roles.entitlements.model.Role;
import com.example.roles.entitlements.model.RoleScope;
import com.example.roles.entitlements.model.Scope;
import com.example.roles.entitlements.repository.RoleRepository;
import com.example.roles.entitlements.repository.RoleScopeRepository;
import com.example.roles.entitlements.repository.ScopeRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class RoleScopeService {
    private final RoleScopeRepository roleScopeRepository;
    private final RoleRepository roleRepository;
    private final ScopeRepository scopeRepository;

    public RoleScopeService(RoleScopeRepository roleScopeRepository,
                            RoleRepository roleRepository,
                            ScopeRepository scopeRepository) {
        this.roleScopeRepository = roleScopeRepository;
        this.roleRepository = roleRepository;
        this.scopeRepository = scopeRepository;
    }

    public void associateRoleWithScopes(Long roleId, List<Long> scopeIds) {
        Role role = roleRepository.findById(roleId)
                .orElseThrow(() -> new RuntimeException("Role not found"));

        for (Long scopeId : scopeIds) {
            Scope scope = scopeRepository.findById(scopeId)
                    .orElseThrow(() -> new RuntimeException("Scope not found"));

            RoleScope roleScope = new RoleScope();
            roleScope.setRole(role);
            roleScope.setScope(scope);
            roleScope.setCreatedDate(LocalDateTime.now());
            roleScopeRepository.save(roleScope);
        }
    }
}

import com.example.roles.entitlements.service.RoleScopeService;
import com.example.roles.entitlements.service.RoleService; // To fetch roles
import com.example.roles.entitlements.service.ScopeService; // To fetch scopes
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Controller
public class RoleScopeController {
    private final RoleScopeService roleScopeService;
    private final RoleService roleService;
    private final ScopeService scopeService;

    public RoleScopeController(RoleScopeService roleScopeService,
                               RoleService roleService,
                               ScopeService scopeService) {
        this.roleScopeService = roleScopeService;
        this.roleService = roleService;
        this.scopeService = scopeService;
    }

    @GetMapping("/roles/scopes/associate")
    public String showAssociateForm(Model model) {
        model.addAttribute("roles", roleService.getAllRoles()); // Fetch all roles
        model.addAttribute("scopes", scopeService.getAllScopes()); // Fetch all scopes
        return "associate_role_scope"; // Thymeleaf template name
    }

    @PostMapping("/roles/scopes")
    public String associateRoleWithScopes(@RequestParam Long roleId, @RequestParam List<Long> scopeIds) {
        roleScopeService.associateRoleWithScopes(roleId, scopeIds);
        return "redirect:/roles/scopes/associate"; // Redirect after submission
    }
}

<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Associate Role with Scopes</title>
</head>
<body>
<h1>Associate Role with Scopes</h1>
<form action="#" th:action="@{/roles/scopes}" method="post">
    <label for="role">Select Role:</label>
    <select id="role" name="roleId" required>
        <option th:each="role : ${roles}" th:value="${role.id}" th:text="${role.name}"></option>
    </select>

    <label for="scopes">Select Scopes:</label>
    <select id="scopes" name="scopeIds" multiple required>
        <option th:each="scope : ${scopes}" th:value="${scope.id}" th:text="${scope.name}"></option>
    </select>

    <button type="submit">Associate</button>
</form>
</body>
</html>