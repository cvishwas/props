import com.example.entitlementservice.model.GroupEntitlement;
import com.example.entitlementservice.repository.GroupEntitlementRepository;
import com.example.entitlementservice.repository.GroupRepository;
import com.example.entitlementservice.repository.EntitlementRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class GroupEntitlementService {

    @Autowired
    private GroupRepository groupRepository;

    @Autowired
    private EntitlementRepository entitlementRepository;

    @Autowired
    private GroupEntitlementRepository groupEntitlementRepository;

    public void associateGroupWithEntitlements(Long groupId, List<Long> entitlementIds) {
        // Check if the group exists
        if (!groupRepository.existsById(groupId)) {
            throw new IllegalArgumentException("Group does not exist");
        }

        // Get existing associations
        List<GroupEntitlement> existingAssociations = groupEntitlementRepository.findAllByGroupId(groupId);

        // Create a set of existing entitlement IDs
        List<Long> existingEntitlementIds = existingAssociations.stream()
                .map(GroupEntitlement::getEntitlementId)
                .collect(Collectors.toList());

        // Add new associations for entitlements that are not already associated
        for (Long entitlementId : entitlementIds) {
            if (!existingEntitlementIds.contains(entitlementId)) {
                if (!entitlementRepository.existsById(entitlementId)) {
                    throw new IllegalArgumentException("Entitlement with ID " + entitlementId + " does not exist");
                }
                GroupEntitlement groupEntitlement = new GroupEntitlement();
                groupEntitlement.setGroupId(groupId);
                groupEntitlement.setEntitlementId(entitlementId);
                groupEntitlementRepository.save(groupEntitlement);
            }
        }

        // Remove associations for entitlements that are no longer selected
        for (GroupEntitlement association : existingAssociations) {
            if (!entitlementIds.contains(association.getEntitlementId())) {
                groupEntitlementRepository.delete(association); // Remove from database
            }
        }
    }

    public List<Entitlement> getEntitlementsByGroupId(Long groupId) {
        // Fetch associated entitlements for the given group ID
        return groupEntitlementRepository.findAllByGroupId(groupId).stream()
                .map(groupEntitlement -> entitlementRepository.findById(groupEntitlement.getEntitlementId()).orElse(null))
                .filter(entitlement -> entitlement != null)
                .collect(Collectors.toList());
    }
}