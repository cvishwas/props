import com.example.roles.entitlements.model.EntitlementRole;
import com.example.roles.entitlements.model.Scope;
import com.example.roles.entitlements.model.EntitlementRolePermission;
import com.example.roles.entitlements.repository.EntitlementRolePermissionRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class EntitlementRolePermissionService {
    private final EntitlementRolePermissionRepository entitlementRolePermissionRepository;

    public EntitlementRolePermissionService(EntitlementRolePermissionRepository entitlementRolePermissionRepository) {
        this.entitlementRolePermissionRepository = entitlementRolePermissionRepository;
    }

    // Method to associate an EntitlementRole with multiple Scopes
    public void associateRoleWithScopes(EntitlementRole entitlementRole, List<Scope> scopes) {
        for (Scope scope : scopes) {
            EntitlementRolePermission entitlementRolePermission = new EntitlementRolePermission();
            entitlementRolePermission.setEntitlementRole(entitlementRole);
            entitlementRolePermission.setResourceScope(scope.getResourceScope()); // Assuming a relationship exists
            entitlementRolePermission.setVersion(1L); // Set version as needed
            entitlementRolePermission.setCreatedDate(LocalDateTime.now());
            entitlementRolePermissionRepository.save(entitlementRolePermission);
        }
    }
}

public String associateRoleWithScopes(@RequestParam Long roleId, @RequestParam List<Long> scopeIds) {
    EntitlementRole entitlementRole = entitlementRoleService.findById(roleId); // Fetch the role
    List<Scope> scopes = scopeIds.stream()
        .map(scopeId -> scopeService.findById(scopeId)) // Fetch scopes by ID
        .collect(Collectors.toList());
    
    entitlementRolePermissionService.associateRoleWithScopes(entitlementRole, scopes); // Associate role with scopes
    return "redirect:/"; // Redirect to the landing page after submission
}