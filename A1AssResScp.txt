<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Associate Resource with Scopes</title>
    <link rel="stylesheet" type="text/css" href="/css/styles.css"> <!-- Link to your stylesheet -->
    <script>
        function fetchResources(applicationId) {
            // Fetch resources based on the selected application
            fetch(`/resources?applicationId=${applicationId}`)
                .then(response => response.json())
                .then(data => {
                    const resourceSelect = document.getElementById("resource");
                    resourceSelect.innerHTML = ""; // Clear previous options
                    data.forEach(resource => {
                        const option = document.createElement("option");
                        option.value = resource.id;
                        option.text = resource.name;
                        resourceSelect.appendChild(option);
                    });
                });
        }
    </script>
</head>
<body>
<h1>Associate Resource with Scopes</h1>

<form action="#" th:action="@{/resources/scopes}" method="post">
    <label for="application">Select Application:</label>
    <select id="application" name="applicationId" onchange="fetchResources(this.value)" required>
        <option th:each="application : ${applications}" th:value="${application.id}" th:text="${application.name}"></option>
    </select>

    <label for="resource">Select Resource:</label>
    <select id="resource" name="resourceId" required>
        <option value="" disabled selected>Select a resource</option>
    </select>

    <label for="scopes">Select Scopes:</label>
    <select id="scopes" name="scopeIds" multiple required>
        <option th:each="scope : ${scopes}" th:value="${scope.id}" th:text="${scope.name}"></option>
    </select>

    <button type="submit">Associate</button>
</form>
</body>
</html>

import com.example.roles.entitlements.model.Application;
import com.example.roles.entitlements.model.Resource;
import com.example.roles.entitlements.model.Scope;
import com.example.roles.entitlements.service.ApplicationService; // Service to fetch applications
import com.example.roles.entitlements.service.ResourceService; // Service to fetch resources
import com.example.roles.entitlements.service.ScopeService; // Service to fetch scopes
import com.example.roles.entitlements.service.RoleScopeService; // Service for associations
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class ResourceScopeController {
    private final ResourceService resourceService;
    private final ScopeService scopeService;
    private final ApplicationService applicationService;

    public ResourceScopeController(ResourceService resourceService, ScopeService scopeService, ApplicationService applicationService) {
        this.resourceService = resourceService;
        this.scopeService = scopeService;
        this.applicationService = applicationService;
    }

    @GetMapping("/resources")
    public List<Resource> getResourcesByApplication(@RequestParam Long applicationId) {
        return resourceService.getResourcesByApplication(applicationId); // Fetch resources based on application ID
    }

    @GetMapping("/scopes")
    public List<Scope> getAllScopes() {
        return scopeService.getAllScopes(); // Fetch all scopes
    }
}

import com.example.roles.entitlements.model.Resource;
import com.example.roles.entitlements.repository.ResourceRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ResourceService {
    private final ResourceRepository resourceRepository;

    public ResourceService(ResourceRepository resourceRepository) {
        this.resourceRepository = resourceRepository;
    }

    public List<Resource> getResourcesByApplication(Long applicationId) {
        return resourceRepository.findByApplicationId(applicationId); // Fetch resources for the specified application
    }

    // Other methods...
}

import com.example.roles.entitlements.model.Resource;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ResourceRepository extends JpaRepository<Resource, Long> {
    List<Resource> findByApplicationId(Long applicationId); // Custom query method
}