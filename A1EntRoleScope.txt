import com.example.roles.entitlements.model.EntitlementRole;
import com.example.roles.entitlements.model.ResourceScope;
import com.example.roles.entitlements.model.Scope;
import com.example.roles.entitlements.repository.EntitlementRoleRepository;
import com.example.roles.entitlements.repository.ResourceScopeRepository;
import com.example.roles.entitlements.repository.ScopeRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class EntitlementRoleService {
    private final EntitlementRoleRepository entitlementRoleRepository;
    private final ScopeRepository scopeRepository;
    private final ResourceScopeRepository resourceScopeRepository;

    public EntitlementRoleService(EntitlementRoleRepository entitlementRoleRepository, 
                                  ScopeRepository scopeRepository,
                                  ResourceScopeRepository resourceScopeRepository) {
        this.entitlementRoleRepository = entitlementRoleRepository;
        this.scopeRepository = scopeRepository;
        this.resourceScopeRepository = resourceScopeRepository;
    }

    public void associateRoleWithScopes(Long roleId, List<Long> scopeIds) {
        EntitlementRole entitlementRole = entitlementRoleRepository.findById(roleId)
                .orElseThrow(() -> new RuntimeException("Entitlement Role not found"));

        for (Long scopeId : scopeIds) {
            Scope scope = scopeRepository.findById(scopeId)
                    .orElseThrow(() -> new RuntimeException("Scope not found"));

            ResourceScope resourceScope = new ResourceScope();
            resourceScope.setResource(entitlementRole.getResource()); // Assuming the role has a resource
            resourceScope.setScope(scope);
            resourceScope.setCreatedDate(LocalDateTime.now());
            resourceScopeRepository.save(resourceScope);
        }
    }
}

import com.example.roles.entitlements.service.EntitlementRoleService;
import com.example.roles.entitlements.service.ResourceService; // To fetch resources
import com.example.roles.entitlements.service.ScopeService; // To fetch scopes
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Controller
public class EntitlementRoleScopeController {
    private final EntitlementRoleService entitlementRoleService;
    private final ResourceService resourceService;
    private final ScopeService scopeService;

    public EntitlementRoleScopeController(EntitlementRoleService entitlementRoleService,
                                           ResourceService resourceService,
                                           ScopeService scopeService) {
        this.entitlementRoleService = entitlementRoleService;
        this.resourceService = resourceService;
        this.scopeService = scopeService;
    }

    @GetMapping("/roles/scopes/associate")
    public String showAssociateForm(Model model) {
        model.addAttribute("roles", entitlementRoleService.getAllRoles()); // Method to fetch all roles
        model.addAttribute("scopes", scopeService.getAllScopes()); // Fetch all scopes
        return "associate_role_scope"; // Thymeleaf template name
    }

    @PostMapping("/roles/scopes")
    public String associateRoleWithScopes(@RequestParam Long roleId, @RequestParam List<Long> scopeIds) {
        entitlementRoleService.associateRoleWithScopes(roleId, scopeIds);
        return "redirect:/roles/scopes/associate"; // Redirect after submission
    }
}

<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Associate Role with Scopes</title>
</head>
<body>
<h1>Associate Role with Scopes</h1>
<form action="#" th:action="@{/roles/scopes}" method="post">
    <label for="role">Select Role:</label>
    <select id="role" name="roleId" required>
        <option th:each="role : ${roles}" th:value="${role.id}" th:text="${role.name}"></option>
    </select>

    <label for="scopes">Select Scopes:</label>
    <select id="scopes" name="scopeIds" multiple required>
        <option th:each="scope : ${scopes}" th:value="${scope.id}" th:text="${scope.name}"></option>
    </select>

    <button type="submit">Associate</button>
</form>
</body>
</html>