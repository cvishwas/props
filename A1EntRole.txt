import javax.persistence.*;
import java.time.LocalDateTime;

@Entity
public class EntitlementRole {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String description;
    private Long version;
    private String createdUserId;
    private LocalDateTime createdDate;
    private String updatedUserId;
    private LocalDateTime updatedDate;

    @ManyToOne
    @JoinColumn(name = "resource_id", nullable = false)
    private Resource resource;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Long getVersion() {
        return version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    public String getCreatedUserId() {
        return createdUserId;
    }

    public void setCreatedUserId(String createdUserId) {
        this.createdUserId = createdUserId;
    }

    public LocalDateTime getCreatedDate() {
        return createdDate;
    }

    public void setCreatedDate(LocalDateTime createdDate) {
        this.createdDate = createdDate;
    }

    public String getUpdatedUserId() {
        return updatedUserId;
    }

    public void setUpdatedUserId(String updatedUserId) {
        this.updatedUserId = updatedUserId;
    }

    public LocalDateTime getUpdatedDate() {
        return updatedDate;
    }

    public void setUpdatedDate(LocalDateTime updatedDate) {
        this.updatedDate = updatedDate;
    }

    public Resource getResource() {
        return resource;
    }

    public void setResource(Resource resource) {
        this.resource = resource;
    }
}

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.hibernate.ddl-auto=update

import com.example.roles.entitlements.model.EntitlementRole;
import com.example.roles.entitlements.model.Resource;
import com.example.roles.entitlements.repository.EntitlementRoleRepository;
import com.example.roles.entitlements.repository.ResourceRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@Service
public class EntitlementRoleService {
    private final EntitlementRoleRepository entitlementRoleRepository;
    private final ResourceRepository resourceRepository;

    public EntitlementRoleService(EntitlementRoleRepository entitlementRoleRepository, ResourceRepository resourceRepository) {
        this.entitlementRoleRepository = entitlementRoleRepository;
        this.resourceRepository = resourceRepository;
    }

    public EntitlementRole addEntitlementRole(EntitlementRole entitlementRole, Long resourceId) {
        Resource resource = resourceRepository.findById(resourceId)
                .orElseThrow(() -> new RuntimeException("Resource not found"));
        entitlementRole.setResource(resource);
        entitlementRole.setCreatedDate(LocalDateTime.now());
        entitlementRole.setUpdatedDate(LocalDateTime.now());
        return entitlementRoleRepository.save(entitlementRole);
    }
}

import com.example.roles.entitlements.model.EntitlementRole;
import com.example.roles.entitlements.service.EntitlementRoleService;
import com.example.roles.entitlements.service.ResourceService; // Assume you have a ResourceService
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class EntitlementRoleController {
    private final EntitlementRoleService entitlementRoleService;
    private final ResourceService resourceService; // Assume this service fetches resources

    public EntitlementRoleController(EntitlementRoleService entitlementRoleService, ResourceService resourceService) {
        this.entitlementRoleService = entitlementRoleService;
        this.resourceService = resourceService;
    }

    @GetMapping("/roles/new")
    public String showRoleForm(Model model) {
        model.addAttribute("entitlementRole", new EntitlementRole());
        model.addAttribute("resources", resourceService.getAllResources()); // Fetch resources for dropdown
        return "role_form"; // Thymeleaf template name
    }

    @PostMapping("/roles")
    public String addEntitlementRole(@ModelAttribute EntitlementRole entitlementRole, @RequestParam Long resourceId) {
        entitlementRoleService.addEntitlementRole(entitlementRole, resourceId);
        return "redirect:/roles/new"; // Redirect to form after submission
    }
}

<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Add New Role</title>
</head>
<body>
<h1>Add New Role</h1>
<form action="#" th:action="@{/roles}" th:object="${entitlementRole}" method="post">
    <label for="name">Role Name:</label>
    <input type="text" id="name" th:field="*{name}" required/>

    <label for="description">Description:</label>
    <input type="text" id="description" th:field="*{description}" required/>

    <label for="version">Version:</label>
    <input type="number" id="version" th:field="*{version}" required/>

    <label for="resource">Select Resource:</label>
    <select id="resource" name="resourceId">
        <option th:each="resource : ${resources}" th:value="${resource.id}" th:text="${resource.name}"></option>
    </select>

    <button type="submit">Add Role</button>
</form>
</body>
</html>