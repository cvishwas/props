import com.example.roles.entitlements.model.Resource;
import com.example.roles.entitlements.model.ResourceScope;
import com.example.roles.entitlements.model.Scope;
import com.example.roles.entitlements.repository.ResourceRepository;
import com.example.roles.entitlements.repository.ResourceScopeRepository;
import com.example.roles.entitlements.repository.ScopeRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class ResourceScopeService {
    private final ResourceScopeRepository resourceScopeRepository;
    private final ResourceRepository resourceRepository;
    private final ScopeRepository scopeRepository;

    public ResourceScopeService(ResourceScopeRepository resourceScopeRepository, ResourceRepository resourceRepository, ScopeRepository scopeRepository) {
        this.resourceScopeRepository = resourceScopeRepository;
        this.resourceRepository = resourceRepository;
        this.scopeRepository = scopeRepository;
    }

    public void associateResourceWithScopes(Long resourceId, List<Long> scopeIds) {
        Resource resource = resourceRepository.findById(resourceId)
                .orElseThrow(() -> new RuntimeException("Resource not found"));

        for (Long scopeId : scopeIds) {
            Scope scope = scopeRepository.findById(scopeId)
                    .orElseThrow(() -> new RuntimeException("Scope not found"));
            ResourceScope resourceScope = new ResourceScope();
            resourceScope.setResource(resource);
            resourceScope.setScope(scope);
            resourceScope.setCreatedDate(LocalDateTime.now());
            resourceScopeRepository.save(resourceScope);
        }
    }
}

import com.example.roles.entitlements.service.ResourceScopeService;
import com.example.roles.entitlements.service.ResourceService;
import com.example.roles.entitlements.service.ScopeService; // Assume you have this service
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Controller
public class ResourceScopeController {
    private final ResourceScopeService resourceScopeService;
    private final ResourceService resourceService;
    private final ScopeService scopeService;

    public ResourceScopeController(ResourceScopeService resourceScopeService, ResourceService resourceService, ScopeService scopeService) {
        this.resourceScopeService = resourceScopeService;
        this.resourceService = resourceService;
        this.scopeService = scopeService;
    }

    @GetMapping("/resources/scopes/associate")
    public String showAssociateForm(Model model) {
        model.addAttribute("resources", resourceService.getAllResources());
        model.addAttribute("scopes", scopeService.getAllScopes()); // Assuming you have a method to get all scopes
        return "associate_resource_scope"; // Thymeleaf template name
    }

    @PostMapping("/resources/scopes")
    public String associateResourceWithScopes(@RequestParam Long resourceId, @RequestParam List<Long> scopeIds) {
        resourceScopeService.associateResourceWithScopes(resourceId, scopeIds);
        return "redirect:/resources/scopes/associate"; // Redirect to form after submission
    }
}

<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Associate Resource with Scopes</title>
</head>
<body>
<h1>Associate Resource with Scopes</h1>
<form action="#" th:action="@{/resources/scopes}" method="post">
    <label for="resource">Select Resource:</label>
    <select id="resource" name="resourceId" required>
        <option th:each="resource : ${resources}" th:value="${resource.id}" th:text="${resource.name}"></option>
    </select>

    <label for="scopes">Select Scopes:</label>
    <select id="scopes" name="scopeIds" multiple required>
        <option th:each="scope : ${scopes}" th:value="${scope.id}" th:text="${scope.name}"></option>
    </select>

    <button type="submit">Associate</button>
</form>
</body>
</html>