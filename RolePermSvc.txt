import com.example.organization.model.Role;
import com.example.organization.model.ResourcePermission;
import com.example.organization.model.RolePermission;
import com.example.organization.repository.RolePermissionRepository;
import com.example.organization.repository.RoleRepository;
import com.example.organization.repository.ResourcePermissionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.sql.Timestamp;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Service for managing Role-Permission associations.
 */
@Service
public class RolePermissionService {

    @Autowired
    private RolePermissionRepository rolePermissionRepository;

    @Autowired
    private RoleRepository roleRepository;

    @Autowired
    private ResourcePermissionRepository resourcePermissionRepository;

    /**
     * Assign multiple resource permissions to a role.
     *
     * @param roleId                 ID of the role
     * @param resourcePermissionIds List of resource permission IDs
     * @param userId                 User performing the operation (for audit)
     */
    public void assignPermissionsToRole(Long roleId, List<Long> resourcePermissionIds, String userId) {
        Role role = roleRepository.findById(roleId)
                .orElseThrow(() -> new RuntimeException("Role not found with ID: " + roleId));

        List<ResourcePermission> resourcePermissions = resourcePermissionIds.stream()
                .map(id -> resourcePermissionRepository.findById(id)
                        .orElseThrow(() -> new RuntimeException("ResourcePermission not found with ID: " + id)))
                .collect(Collectors.toList());

        Timestamp now = new Timestamp(System.currentTimeMillis());

        for (ResourcePermission rp : resourcePermissions) {
            // Create new RolePermission
            RolePermission rolePerm = new RolePermission();
            rolePerm.setRole(role);
            rolePerm.setResourcePermission(rp);
            rolePerm.setActiveFlag("Y");
            rolePerm.setInsertTsp(now);
            rolePerm.setLastUpdateTsp(now);
            rolePerm.setInsertUserId(userId);
            rolePerm.setLastUpdateUserId(userId);

            rolePermissionRepository.save(rolePerm);
        }
    }

    /**
     * Retrieve all role-permission associations (optional utility)
     */
    public List<RolePermission> getAllRolePermissions() {
        return rolePermissionRepository.findAll();
    }

    /**
     * Retrieve role permissions for a specific role
     */
    public List<RolePermission> getPermissionsByRole(Long roleId) {
        return rolePermissionRepository.findAll().stream()
                .filter(rp -> rp.getRole().getRoleKey().equals(roleId))
                .collect(Collectors.toList());
    }
}