import static org.junit.jupiter.api.Assertions.*;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

// Replace with your actual package names
// import com.yourcompany.yourproject.service.RoleService;
// import com.yourcompany.yourproject.repository.RoleRepository;
// import com.yourcompany.yourproject.model.Role;

public class RoleServiceTest {

    @Mock
    private RoleRepository roleRepository;

    @InjectMocks
    private RoleService roleService;

    private Role role;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        role = new Role();
        role.setRoleKey(1L);
        role.setRoleName("Admin");
        role.setRoleDesc("Administrator role");
        role.setActiveFlag("Y");
        role.setInsertTsp(new Timestamp(System.currentTimeMillis()));
        role.setInsertUserId("system");
        role.setLastUpdateTsp(role.getInsertTsp());
        role.setLastUpdateUserId("system");
    }

    @Test
    public void testCreateRole() {
        when(roleRepository.save(any(Role.class))).thenReturn(role);
        Role result = roleService.createRole(role, "admin");
        assertNotNull(result);
        assertEquals("Admin", result.getRoleName());
        verify(roleRepository, times(1)).save(role);
    }

    @Test
    public void testGetRole_Found() {
        when(roleRepository.findById(1L)).thenReturn(Optional.of(role));
        Optional<Role> result = roleService.getRole(1L);
        assertTrue(result.isPresent());
        assertEquals("Admin", result.get().getRoleName());
        verify(roleRepository, times(1)).findById(1L);
    }

    @Test
    public void testGetRole_NotFound() {
        when(roleRepository.findById(2L)).thenReturn(Optional.empty());
        Optional<Role> result = roleService.getRole(2L);
        assertFalse(result.isPresent());
        verify(roleRepository, times(1)).findById(2L);
    }

    @Test
    public void testGetAllRoles() {
        List<Role> roles = Arrays.asList(role);
        when(roleRepository.findAll()).thenReturn(roles);
        List<Role> result = roleService.getAllRoles();
        assertNotNull(result);
        assertEquals(1, result.size());
        verify(roleRepository, times(1)).findAll();
    }
}