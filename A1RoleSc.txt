<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Associate Entitlement Role with Scopes</title>
    <link rel="stylesheet" type="text/css" href="/css/styles.css"> <!-- Link to your stylesheet -->
    <script>
        function fetchRoles(resourceId) {
            // Fetch roles based on the selected resource
            fetch(`/roles?resourceId=${resourceId}`)
                .then(response => response.json())
                .then(data => {
                    const roleSelect = document.getElementById("role");
                    roleSelect.innerHTML = ""; // Clear previous options
                    data.forEach(role => {
                        const option = document.createElement("option");
                        option.value = role.id;
                        option.text = role.name;
                        roleSelect.appendChild(option);
                    });
                });
        }
    </script>
</head>
<body>
<h1>Associate Entitlement Role with Scopes</h1>

<form action="#" th:action="@{/roles/scopes}" method="post">
    <label for="resource">Select Resource:</label>
    <select id="resource" name="resourceId" onchange="fetchRoles(this.value)" required>
        <option th:each="resource : ${resources}" th:value="${resource.id}" th:text="${resource.name}"></option>
    </select>

    <label for="role">Select Role:</label>
    <select id="role" name="roleId" required>
        <option value="" disabled selected>Select a role</option>
    </select>

    <label for="scopes">Select Scopes:</label>
    <select id="scopes" name="scopeIds" multiple required>
        <option th:each="scope : ${scopes}" th:value="${scope.id}" th:text="${scope.name}"></option>
    </select>

    <button type="submit">Associate</button>
</form>
</body>
</html>

import com.example.roles.entitlements.model.Resource;
import com.example.roles.entitlements.model.Role;
import com.example.roles.entitlements.model.Scope;
import com.example.roles.entitlements.service.ResourceService;
import com.example.roles.entitlements.service.RoleService;
import com.example.roles.entitlements.service.ScopeService;
import com.example.roles.entitlements.service.RoleScopeAssociationService; // Service to manage associations
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Controller
public class RoleScopeAssociationController {
    private final ResourceService resourceService;
    private final RoleService roleService;
    private final ScopeService scopeService;
    private final RoleScopeAssociationService roleScopeAssociationService;

    public RoleScopeAssociationController(ResourceService resourceService,
                                          RoleService roleService,
                                          ScopeService scopeService,
                                          RoleScopeAssociationService roleScopeAssociationService) {
        this.resourceService = resourceService;
        this.roleService = roleService;
        this.scopeService = scopeService;
        this.roleScopeAssociationService = roleScopeAssociationService;
    }

    @GetMapping("/roles/scopes/associate")
    public String showAssociateForm(Model model) {
        model.addAttribute("resources", resourceService.getAllResources()); // Fetch all resources
        model.addAttribute("scopes", scopeService.getAllScopes()); // Fetch all scopes
        return "associate_entitlement_role_scopes"; // Thymeleaf template name
    }

    @GetMapping("/roles")
    public List<Role> getRolesByResource(@RequestParam Long resourceId) {
        return roleService.getRolesByResource(resourceId); // Fetch roles based on the selected resource
    }

    @PostMapping("/roles/scopes")
    public String associateRoleWithScopes(@RequestParam Long resourceId, @RequestParam Long roleId, @RequestParam List<Long> scopeIds) {
        roleScopeAssociationService.associateRoleWithScopes(resourceId, roleId, scopeIds);
        return "redirect:/"; // Redirect to the landing page after submission
    }
}

import com.example.roles.entitlements.model.RoleScope;
import com.example.roles.entitlements.model.Scope;
import com.example.roles.entitlements.model.Resource;
import com.example.roles.entitlements.repository.RoleScopeRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class RoleScopeAssociationService {
    private final RoleScopeRepository roleScopeRepository;

    public RoleScopeAssociationService(RoleScopeRepository roleScopeRepository) {
        this.roleScopeRepository = roleScopeRepository;
    }

    public void associateRoleWithScopes(Long resourceId, Long roleId, List<Long> scopeIds) {
        for (Long scopeId : scopeIds) {
            RoleScope roleScope = new RoleScope();
            // Assuming you have methods to find the Resource and Role by IDs
            roleScope.setResource(resourceService.findById(resourceId));
            roleScope.setRole(roleService.findById(roleId));
            roleScope.setScope(scopeService.findById(scopeId));
            roleScope.setCreatedDate(LocalDateTime.now());
            roleScopeRepository.save(roleScope);
        }
    }
}

import com.example.roles.entitlements.model.Resource;
import com.example.roles.entitlements.repository.ResourceRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ResourceService {
    private final ResourceRepository resourceRepository;

    public ResourceService(ResourceRepository resourceRepository) {
        this.resourceRepository = resourceRepository;
    }

    // Fetch all resources
    public List<Resource> getAllResources() {
        return resourceRepository.findAll();
    }

    // Other methods...
}

import com.example.roles.entitlements.model.Role;
import com.example.roles.entitlements.repository.RoleRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class RoleService {
    private final RoleRepository roleRepository;

    public RoleService(RoleRepository roleRepository) {
        this.roleRepository = roleRepository;
    }

    public List<Role> getRolesByResource(Long resourceId) {
        return roleRepository.findByResourceId(resourceId); // Fetch roles based on resource
    }

    // Other methods...
}